[
  {
    "title": "Serverless JSON Web Token Authentication on Amazon Web Services",
    "date": "June 13 2016",
    "body": "<h2>Serverless App with JWT Authentication</h2><p>The folks at AWS say you can create a serverless and scalable webap using DynamoDB, Lambda, API Gateway, and S3. Let's try it.</p><h3>The Database</h3><p>Creating some tables in DynamoDB is pretty straight forward. You get to pick your primary key with the opotion for a secondary key. Scans over those fields are indexed and will be fast.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/dynamodb-admin.png\" alt=\"DynamoDB Admin Page\"/><p>You can put any JSON formatted object into DynamoDB as long as it has your primary key (and your secondary key if you choose to use one).</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/dynamodb-item-text.png\" alt=\"DynamoDB Item in Plain Text\"/><h3>The Code</h3><p>The \"serverless\" code runs on AWS Lambda. Lambda allows a developer to upload an artifact as a lambda function. When the function is called, a virtual machine boots up and runs the code. I chose Python as my language, but Node.js and Java are also available. From what I am told, Python is the fastest to boot up and Java is the slowest.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/lambda-admin-simple-code.png\" alt=\"Lambda Admin Simple Function Code\"/><p>Very simple lambda functions can be written inline using the AWS gui.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/lambda-admin-zip-code.png\" alt=\"Lambda Admin Function Zip Code\"/><p>More complex functions that include external modules will need to be zipped up and uploaded either through the gui or using S3.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/lambda-admin-configuration.png\" alt=\"Lambda Admin Function Configuration\"/><p>When configuring a Lambda function, you will need to give it an IAM role with perms to access the other AWS as desired.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/iam-admin-configuration.png\" alt=\"IAM Admin Role Configuration\"/><p>I this case, I want my function to be able to write to the log stream. I want everything to have this ability. Log-less debugging is not fun. I also want my function to have read/write permissions to DynamoDB.</p><h3>The API</h3><p>API Gateway allows you to expose your lambda functions via a REST api.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/apigateway-admin-create-resource.png\" alt=\"API Gateway Adming Create Resource\"/><p>To expose a REST method, you first must create a new api resource.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/apigateway-admin-create-method.png\" alt=\"API Gateway Admin Create Method\"/><p>Once you have your resource, create a new method for that resource. Choose your method verb such as GET or POST. Then, configure your integration type to be a Lambda Function.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/apigateway-enable-cors.png\" alt=\"API Gateway Enable CORS\"/><p>In order to hit your API from the frontend domain, the api has to allow Cross Origin Recourse Sharing or CORS. API Gateway makes this very easy. Simply select your resource, then use the Actions dropdown to select Enable CORS. On the next page, just hit the big blue button that says \"Enable CORS and replace existing CORS headers\". When you do this, an OPTIONS method will be added to your resource. The serves as a 'pre-flight' verification step for the other methods. The response headers on the OPTIONS method will tell the client the acceptable origins and request headers for the other methods. <mark>NOTE: If you use the caching feature on the API Gateway, be aware that the cache is recource specific, not resource AND method specific. So with a cache of 2 seconds on the API and a POST coming from a modern browser, the browser will first hit the resource with an OPTIONS method. Then, the browser will attempt the POST. The POST will have the same reponse data as the OPTIONS request as it will hit the cache.</mark> I lost about 5 hours due to this little gotcha.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/apigateway-admin-custom-authorization.png\" alt=\"API Gateway Admin Custom Authorization\"/><p>The API Gateway has a very cool custom authorization feature. Any method can be configured to authenticate using custom code. The 'Authoriztion' header is sent to a Lambda function of your choosing. The Lambda function is expected to return a valid IAM policy. This policy is used to determine if the user has access to the method or not.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/apigateway-stage-configuration.png\" alt=\"API Gateway Stage Configuration\"/><p>Once your api is created and configured, create a deployment stage and deploy it.</p><h3>The Front-End</h3><p>Creating a static webiste in S3 is pretty common place and highly documented, so I won't go into it much here.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/s3-admin-static-website-configuration.png\" alt=\"S3 Admin Static Website Configuraton\"/><p>But, you will want to set up an S3 bucket as a static website with permissions for everybody to view it. Then, you will want to use Route53 to map your domain name to the bucket.</p><p>The front end will need to run completely on the client side. It is a purly static website. All code will be either in Lambda functions or Javascript.</p><h2>Authentication</h2><p>So, that was a long preamble. Now let's discuss authentication using JSON Web Tokens.</p><h3>Sign up</h3><img src=\"blog-post/serverless-jwt-authentication-on-aws/signup-html.png\" alt=\"Signup HTML\"/><p>The above code is the html for the signup form. You can see that a username, password, name are being added to the ng-model.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/signup-js.png\" alt=\"Signup JavaScript\"/><p>The angular code creates a post to the API Gateway to create a new user.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/signup-py.png\" alt=\"Signup Lambda\"/><p>The above Lambda function is envoked on the JSON object from the form. The password is hashed and inserted into the DynamoDB table.</p><h3>Login</h3><img src=\"blog-post/serverless-jwt-authentication-on-aws/login-html.png\" alt=\"Login HTML\"/><p>The HTML for the login is a dropdown form for login that is visible when there is no user in local storage on the browser and a dropdown logout button that is visible when there is a user in local storage.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/login-js.png\" alt=\"Login JavaScript\"/><p>The login function posts the user credentials to the API Gateway that returns a JSON Web Token. The jwt is stored in the browser local storgae using the 'UserService' that relies on the 'store' package from the 'angular-store' library. The logout function simply sets the current user in the local storage to 'null'.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/login-py.png\" alt=\"Login Lambda\"/><p>The Lambda function compares the incoming passowrd to the hashed passowrd by applying the same hash to the incoming password before comparing. If the password is a match for the given user name, a valid JSON Web Token is returned.</p><h3>Post a Message</h3><img src=\"blog-post/serverless-jwt-authentication-on-aws/message-html.png\" alt=\"Message HTML\"/><p>The HTML displays the most recent 20 posts and a button with a modal form for posting a message.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/message-js.png\" alt=\"Message JavaScript\"/><p>The controller gets the message from the API when the page opens and loads them into scope. It also opens and closes the modal form and posts the new messages to the API.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/message-py.png\" alt=\"Message Lambda\"/><p>The Lambda code is trivial and simply inserts the new record into the DynamoDB.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/interceptor-js.png\" alt=\"Interceptor Javascript\"/><p>There is an app-wide interceptor that can manipulate request before they are sent. In this case it will add the Authentication header to all requests if there is a logged in user.</p><img src=\"blog-post/serverless-jwt-authentication-on-aws/authorizer-py.png\" alt=\"Authorizer Lambda\"/><p>The message POST method has been configured to call the 'authorizer' Lambda function on each request before proceeding. The returned object is a valid IAM Policy that the API Gateway uses to determine if it should returna  '401 Not Authorized' or run the linked Lambda function. The function itself takes the JSON Web Token to validate the user. If everything checks out, the function returns an IAM Policy giving permission to POST to the given route.</p><h2>External Resources</h2><p><a href=\"http://cudas.org\">The site</a></p><p><a href=\"https://github.com/austindlawless/cudas\">The code</a></p>",
    "preview": "<p>Serverless JSON Web Token Authentication on Amazon Web Services</p>",
    "url": "serverless-jwt-authentication-on-aws"
  },
  {
    "title": "God the Father",
    "date": "Oct 24 2014",
    "body": "<h2>God The Father<\/h2><h3>What is He?<\/h3><p>He is a spirit being - not flesh and blood. John 4:24<\/p><p>He is eternal - uncreated. Psalm 110:2, Genesis 1:1<\/p><p>He is holy. Revelation 4:8, John 17:11<\/p><p>He is good. Psalm 136:1<\/p><p>He is just. Acts 17:31<\/p><p>He is unchanging. Psalm 102:25-27, Isaiah 46:10, Hebrews 6:17, James 1:17<\/p><p>He is wise. Psalm 147:5<\/p><p>He is true. Hebrews 6:18<\/p><p>He is merciful. Exodus 24:6-7<\/p><p>He is faithful - trustworthy. 1 Corinthians 1:9<\/p><p>(Much of the above is not exclusive to the Father.)<\/p><h3>Where is He?<\/h3><p>He is in heaven seated on His throne. (Spoiler alert: Jesus is at his right hand, interceding - praying - on our behalf. Feels good doesn't it.) Luke 22:69, Mark 16:19, Romans 8:34<\/p><h3>Who is He?<\/h3><p>He is the Father part of the Triune God. I do not think that our minds can comprehend the Trinity. I think it is safe to say that there is no earthly explanation of the concept. Things we state as facts about God seem to be mutually exclusive: God is one. God the Father, Son and Spirit. Suffice to say, it is confusing. Moving on.<\/p><h4>We call him Father. Why?<\/h4><p>Jesus called him Father. Mark 14:36<\/p><p>Jesus told us to call him Father. Mathew 6:9-13<\/p><h4>What does it mean for Him to be the Father?<\/h4><p>In order to be a Father, one must have a son (or daughter, but in this case son). It is a relational title that requires a counter person, again the Son. The Father did not begat, birth or create the Son. God is unchanging. He has always been a Father/Son/Spirit relationship. The Father did not become the Father. He is the Father.<\/p><p>Mathew 11:27, Genesis 1:26<\/p><h3>What does He do?<\/h3><p>He is the decision maker for the Trinity. His will is carried out by the Son and the Spirit. Apparently the God-persons do not share a knowledge space - I told you it is confusing. Only the Father knows when he will send the Son back to Earth.<\/p><p>Mathew 24:36, Luke 22:42, John 14:26, John 6:39, John 12:49-50, John 5:19, John 5:30, John 14:31<\/p><h3>Discussion Questions<\/h3><p>What is your favorite aspect of the Father? Why?<\/p><p>Which aspects of the Father are most difficult for you to believe or understand? Why?<\/p><p>What are some false beliefs about the Father that you see in the secular - non-Christian - world?<\/p><p>To whom should we pray? Why?<\/p><p>Brain Teaser: Hilary's felicitous paradox: &quot;The Father is the greater without the Son being the lesser.&quot;<\/p>",
    "preview": "<p>God The Father<\/p><p>What is He?<\/p><p>He is a spirit being - not flesh and blood. John 4:24<\/p>",
    "url": "god-the-father"
  },
  {
    "title": "Bible Study Template",
    "date": "March 11 2015",
    "body": "<h2>Observations<\/h2><p>First, make some observations. What does the passage say? Possibly things that are emphasized or repeated. (Quick short statements.)<\/p><h2>Interpret<\/h2><p>Now we need to interpret what we've read. What does the passage mean? Look at cross references. Study the culture. Draw conclusions as to the meaning of the passage. Use the observations if they are helpful, but it is not required. What are one to three main interpretations from this passage?<\/p><ol><li>Thematize your interpretation.<\/li><li>Explain your interpretation.<\/li><li>Prove your interpretation.<\/li><\/ol><h2>Tone<\/h2><p>How does the passage make me feel? Look for the emotion of the passage.<\/p><h2>Application<\/h2><p>This is the goal of all the studying we've done up to this point. What do we do?<\/p><ol><li>How does the truth revealed here affect my relationship with God?<\/li><li>How does the truth revealed here affect my relationship with others?<\/li><li>How does the truth revealed here affect me?<\/li><li>How does the truth revealed here affect my response to Satan?<\/li><\/ol>",
    "url": "bible-study-template"
  }
]